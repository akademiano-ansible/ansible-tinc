# Inspired by https://github.com/thisismitch/ansible-tinc

- name: clear localhost tinc dir
  delegate_to: localhost
  run_once: true
  file:
    path: "{{tinc_fetch_dir}}"
    state: absent
  changed_when: false

- name: clear tinc dir
  file:
    path: "/etc/tinc/{{ tinc_netname }}/hosts/"
    state: absent
  become: yes
  changed_when: false

- name: ensure tinc netname directory exists
  file:
    path: "/etc/tinc/{{ tinc_netname }}/hosts"
    recurse: True
    state: directory

- name: create /etc/tinc/nets.boot file from template
  copy:
    content: "{{ tinc_netname }}"
    dest: /etc/tinc/nets.boot
  notify:
    - Restart Service

- name: ensure tinc.conf contains connection to core nodes
  template:
    src: tinc.conf.j2
    dest: "/etc/tinc/{{ tinc_netname }}/tinc.conf"
  notify:
    - Restart Service

- name: create tinc-up file
  template:
    src: tinc-up.j2
    dest: "/etc/tinc/{{ tinc_netname }}/tinc-up"
    mode: 0755
  notify:
    - Restart Service

- name: create tinc-down file
  template:
    src: tinc-down.j2
    dest: "/etc/tinc/{{ tinc_netname }}/tinc-down"
    mode: 0755
  notify:
    - Restart Service

- name: ensure tinc hosts file binds to physical ip address
  lineinfile:
    dest: "/etc/tinc/{{ tinc_netname }}/hosts/{{ inventory_hostname | replace('.','_') | replace('-','_') }}"
    line: "Address = {{ tinc_control_plane_bind_ip | default (hostvars[inventory_hostname][tinc_bind_network_interface | default('ansible_eth0', true)][tinc_bind_address_family|default('ipv4', true)]['address'], true) }}"
    create: yes
  when: inventory_hostname in groups['tinc_spine_nodes']
  notify:
    - Restart Service

- name: ensure subnet ip address is properly set in tinc host file
  lineinfile:
    dest: "/etc/tinc/{{ tinc_netname }}/hosts/{{ inventory_hostname | replace('.','_') | replace('-','_') }}"
    line: "Subnet = {{ tinc_vpn_ip }}/32"
    create: yes
  notify:
    - Restart Service

- name: check whether /etc/tinc/netname/hosts/inventory_hostname contains "-----END RSA PUBLIC KEY-----"
  command: awk '/^-----END RSA PUBLIC KEY-----$/'  /etc/tinc/{{ tinc_netname }}/hosts/{{ inventory_hostname | replace('.','_') | replace('-','_') }}
  changed_when: "public_key.stdout != '-----END RSA PUBLIC KEY-----'"
  register: public_key

# this is necessary because the public key will not be generated (non-interactively) if the private key already exists
- name: delete private key and regenerate keypair if public key is absent from tinc hosts file
  file:
    path: "/etc/tinc/{{ tinc_netname }}/rsa_key.priv"
    state: absent
  when: public_key.changed

- name: create tinc private key (and append public key to tincd hosts file)
  command: "tincd -n {{ tinc_netname }} -K{{ tinc_key_size }}"
  args:
    creates: "/etc/tinc/{{ tinc_netname }}/rsa_key.priv"
  notify:
    - Restart Service

- name: fetch tinc hosts file after key creation
  fetch:
    src: "/etc/tinc/{{ tinc_netname }}/hosts/{{ inventory_hostname | replace('.','_') | replace('-','_') }}"
    dest: "{{tinc_fetch_dir}}/{{ inventory_hostname | replace('.','_') | replace('-','_') }}"
    flat: yes

- name: sync the fetched tinc hosts files on each host
  copy:
    src: "{{tinc_fetch_dir}}/"
    dest: "/etc/tinc/{{ tinc_netname }}/hosts/"
    owner: root
    group: root
    mode: u=rwX,g=rX,o=rX
  notify:
    - Restart Service

#- name: add nodes to /etc/hosts (ansible_inventory resolves to vpn_ip)
#  lineinfile:
#    dest: /etc/hosts
#    regexp: "^{{ hostvars[item].tinc_vpn_ip }}"
#    line: "{{ hostvars[item].tinc_vpn_ip }} {{ item }}"
#    state: present
#  when: hostvars[item].tinc_vpn_ip is defined
#  with_items: "{{ play_hosts }}"
#  tags:
#    - tinc_internal_hosts

# Ensure the systemd daemon is reloaded and the service is restarted

- name: ensure tinc is enabled
  systemd:
    name: "{{ tinc_service_name }}"
    enabled: yes
    state: started

